parent.0 = ec.params

# ec.Evolve
# simple generational evolution
state = 				ec.simple.SimpleEvolutionState
#state = 				model.MyEvolutionState

# ec.EvolutionState
# We're using the standard initialization method
init = 					ec.simple.SimpleInitializer
# We're using the standard (empty) finalization method
finish = 	        		ec.simple.SimpleFinisher
# We're using the standard (empty) exchange method
exch = 					ec.simple.SimpleExchanger
# We're using standard breeding -- no cross-population breeding
breed =					ec.simple.SimpleBreeder
# We're using standard evaluation -- no coevolution
eval =					ec.simple.SimpleEvaluator
# We're using simple statistics
stat =					ec.simple.SimpleStatistics

#	Jobs
jobs = 15

#	Run for 300 generations, not quit prematurely if I find something ideal
generations =				40
quit-on-run-complete =			false



#	ec.Initializer
pop = 					ec.Population


# ec.Population
# No multiple populations
pop.subpops =				1
pop.subpop.0 = 				ec.Subpopulation


# ec.Subpopulation

# subpop size is 500 individuals
pop.subpop.0.size =			40
# don't bother trying to eliminate duplicates from the
# initial population
pop.subpop.0.duplicate-retries =	0

# ec.simple.SimpleBreeder
# By default elitism isn't done.  If you want to do elitism for, say,
# the top 10 individuals in subpopulation 0, you'd say:
#breed.elite.0 = 			8


# ec.SimpleStatistics
# output statistics to the file "out.stat" in the directory
# the run was started in
stat.file				$out.stat
#stat.do-size = true
#stat.do-time = true
#stat.do-depth = true